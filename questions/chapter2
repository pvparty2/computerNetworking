R1. List five nonproprietary Internet applications and the application-layer protocols that they use.
A: 
1. Web - HTTP
2. E-mail - SMTP
3. File Transfer - FTP
4. Remote Terminal Access - Telnet
5. Internet Telephony - SIP, RTP

R2. What is the difference between network architecture and application architecture?
In network architecture, you have to decide between TCP or UDP transport services.
In this respect, the network architecture is fixed and provides a set of services to applications.
In application architecture, you have to decide which application-layer protocol to use or create.
You have to decide between client-server architecture or peer-to-peer archictecture. 

R3. For a communication session between a pair of processes, which process is the client and which is the server?
A: Usually, the client is the process that sends a request message.
And the server is the process that receives a request message.

R4. For a P2P file-sharing application, do you agree with the statement, 
“There is no notion of client and server sides of a communication session”? Why or why not?
A: I disagree, because even in P2P file-sharing, the client will be the process that requests a file,
and the server will be the process that sends that file. 
Aka. clients download files, whereas servers upload files.

R5. What information is used by a process running on one host to identify a process running on another host?
A: IP address to identify the host, and the port number to identify the socket linked to the process.

R6. Suppose you wanted to do a transaction from a remote client to a server as fast as possible. Would you use UDP or TCP? Why?
A: UDP nor TCP have a guarantee on timing requirements of an application.
Timing depends on the Internet's congestion and traffic levels.

R7. Referring to Figure 2.4, we see that none of the applications listed in Figure 2.4 requires both no data loss and timing. 
Can you conceive of an application that requires no data loss and that is also highly time-sensitive?
A: Medical devices or war applications. For example, a device that mimics a heart for a human. 
We want this device to run consistently and correctly. Any small error in data can cause faulty alerts and concerns to doctors.
At the same time, correct alerts need to be sent ASAP to save a patients life.

R8. List the four broad classes of services that a transport protocol can provide. 
For each of the service classes, indicate if either UDP or TCP (or both) provides such a service.
A: TCP guarantees: 
1. Reliable Data Transfer
2. Congestion Control
UDP does not guarantee the above.
Neither UDP nor TCP can guarantee throughput and timing.

R9. Recall that TCP can be enhanced with TLS to provide process-to-process security services, including encryption. 
Does TLS operate at the transport layer or the application layer? 
If the application developer wants TCP to be enhanced with TLS, what does the developer have to do?
A: TLS operates at the application layer. To incorporate TLS before sending messages via TCP, 
the application must send its message to TLS via its API/socket. The TLS then encrypts the message and forwards to the TCP socket.

R10. What is meant by a handshaking protocol?
A: This is a protocol used to establish a TCP connection. 
The client and server agree to a transport layer protocol to communicate with each other.
The client sends a TCP segment to the server, the servers responds with and acknowledgement, and 
finally the client confirms by sending the acknowledgment back along with its request.

R11. Why do HTTP, SMTP, and IMAP run on top of TCP rather than on UDP?
A: For all three protocols, we want to guarantee the reliable transfer of data.
UDP does not provide any guarantee that the data will arrive, not to mention if it will be correct.

R12. Consider an e-commerce site that wants to keep a purchase record for each of its customers. 
Describe how this can be done with cookies.
A: The site web server can maintain a table of clients where each row in the table is identified by a unique cookie.
Each cookie identifies a client. The cookie is set in the web server, and is sent via HTTP int he Set-Cookie header.
The browser saves the cookie ID in local storage on the client's computer.
When the browser requests the e-commerce site again, the browser can include the saved cookie in its request to the web server.
The web server can tailor the web page back to the client using its table and the provided cookie. 

R13. Describe how Web caching can reduce the delay in receiving a requested object. 
Will Web caching reduce the delay for all objects requested by a user or for only some of the objects? Why?
A: Web caches can reduce delays for requested objects by storing copies of frequently requested objects.
Since Web caches are linked directly to an Enterprise or University network, for example, 
the requested objects travel across fewer links, routers, and switches, thus reducing delay.
The objects also will not be bottlenecked by any, if any, routers with low transmission speeds.
However, web caches do not have copies of all objects that a client might request from a server.
So delays are not to be expected for all objects. This is because if a client is the first one
to request a specific object, then the client will have to wait a longer time as the Web Cache
reaches across the Internet to the origin server to get the requested object, copy it and store it in cache,
and then send it to the client.

R14. Telnet into a Web server and send a multiline request message. 
Include in the request message the If-modified-since: header line to force a 
response message with the 304 Not Modified status code.
A: N/A

R15. List several popular messaging apps. Do they use the same protocols as SMS?
A: iMessage uses a proprietary protocol called Apple Push Notification service (APNs).
WhatsApp uses HTTP/S

R16. Suppose Alice, with a Web-based e-mail account (such as Hotmail or Gmail), 
sends a message to Bob, who accesses his mail from his mail server using IMAP. 
Discuss how the message gets from Alice’s host to Bob’s host. 
Be sure to list the series of application-layer protocols that are used to move the message between the two hosts.
A: If Alice is using a web-based e-mail account, then Alice creates a message in the web application
and sends the message to her mail server using HTTP. 
Alice's mail server receives the message, and forwards it to Bob's mail server using SMTP.
Bob's mail server saves the message in Bob's inbox.
Bob uses IMAP to read the message from his mail server.

R17. Print out the header of an e-mail message you have recently received. 
How many Received: header lines are there? 
Analyze each of the header lines in the message.
A: N/A


R18. What is the HOL blocking issue in HTTP/1.1? How does HTTP/2 attempt to solve it? 
A: A web page is made up of many different objects. For example, a web page can be the HTML file, 3 images, and a video file.
When a client requests this web page, when a web server tries to send these objects over a single TCP connection
then HOL blocking can occur. The large video object, if it is at the head of the web server's response message,
will take a long time to reach the client due to its size, relative to the smaller sized objects.
As the smaller objects wait until the video file has finished transmitting, they are experiencing head of line blocking.

R19. Is it possible for an organization’s Web server and mail server to have exactly the same alias for a hostname (for example, foo.com)? 
What would be the type for the RR that contains the hostname of the mail server?
A: It's possible for a Web server and mail server to share the same alias for a host name because DNS servers can return different types of resource records.
For a web server, the DNS server will return a resource record of type A.
For a mail server, the DNS server will return a resource record of type MX.

R20. Look over your received e-mails, and examine the header of a message sent from a user with a .edu e-mail address. 
Is it possible to determine from the header the IP address of the host from which the message was sent? 
Do the same for a message sent from a Gmail account.
A: N/A

R21. In BitTorrent, suppose Alice provides chunks to Bob throughout a 30-second interval. 
Will Bob necessarily return the favor and provide chunks to Alice in this same interval? Why or why not?
A: Bob will not return the favor if Alice is supplying that data at a lower rate as compared to the other peers.
In this scenario, she will be choked, and Bob will have other unchoked providing him chunks at a much faster rate.
Tit-for-tat protocol.

R22. Consider a new peer Alice that joins BitTorrent without possessing any chunks. 
Without any chunks, she cannot become a top-four uploader for any of the other peers, since she has nothing to upload. 
How then will Alice get her first chunk?
A: Alice will get her first chunk by trying to establish a connection with any or all of the peers in the torrent,
as provided by to her by the tracker. Along with the top-four uploaders, peer usually select a random "optimistically unchoked" 
peer with which to exchange chunks with. Over time, Alice will be selected as one of these "lucky" peers, and receive her first chunk.

R23. What is an overlay network? Does it include routers? What are the edges in the overlay network?
A: An overlay network is any network that is built logically on another logical network.
Peer-to-peer networks are a type of overlay network built on top of the Internet. 
The nodes of the network are the individual PCs, laptops, and smartphones. 
In the peer-to-peer network, there are no routers because the hosts communicate directly with each other.

R24. CDNs typically adopt one of two different server placement philosophies. Name and briefly describe them.
A: Philosophy #1: Enter Deep - in this philosophy, CDN server clusters are placed deep inside access ISPs around the world.
The goal is to reduce delay and increase throughput by reducing the number of links and routers between 
the CDN servers and the clients.

R25. Besides network-related considerations such as delay, loss, and bandwidth performance, 
there are other important factors that go into designing a CDN server selection strategy. What are they?
A: Maintenance and delivery costs. Security measures.

R26. In Section 2.7, the UDP server described needed only one socket, whereas the TCP server needed two sockets. Why? 
If the TCP server were to support n simultaneous connections, each from a different client host, how many 
sockets would the TCP server need?
A: TCP server needs two sockets. One socket is to listen in for incoming connection requests from clients.
The second socket is the actual TCP connection used to move bytes between the client and server.
UDP server only needs one socket because there is no connection established between client and server.
The UDP server simply accepts a message from any client on that one socket.
If the TCP server were to support n simultaneous connections, the TCP server would need n + 1 sockets.

R27. For the client-server application over TCP described in Section 2.7, why must the server program be executed before the client program? 
For the client-server application over UDP, why may the client program be executed before the server program?
TCP requires a connection to be established between a client and a server. If a server is not on, then the client has no socket to establish a connection with. Therefore, the server program must be executed and running, such that when the client program is executed it has a socket to connect to.
With UDP, the client can send a message to an IP address and port number with the message itself. UDP has no guarantee of delivery, so if the host is not on, then the message will be undelivered.


P1. True or false?
a. A user requests a Web page that consists of some text and three images. 
For this page, the client will send one request message and receive four response messages.
A: False, there is only 1 response for every request.

b. Two distinct Web pages (for example, www.mit.edu/research.html and www.mit.edu/students.html) can be sent over the same persistent connection.
A: True

c. With nonpersistent connections between browser and origin server, it is possible for a single TCP segment to carry two distinct HTTP request messages.
A: False. A TCP segment consists of 1 message with headers.

d. The Date: header in the HTTP response message indicates when the object in the response was last modified.
A: False. That would be the Last-Modified header. The Date header is the date and time the response message was created.

e. HTTP response messages never have an empty message body.
A: False. A HEAD request returns an empty message body in the response.

P2. SMS, iMessage, Wechat, and WhatsApp are all smartphone real-time messaging systems. After doing some research on the Internet, for each of these systems write one paragraph about the protocols they use. Then write a paragraph explaining how they differ.
SMS uses the cellular network and has a 160 characeter limit (alphanumeric). SMS is not encrypted. iMessage uses the data network. It can send alphanumeric characters as well as images, videos, and files.
iMessage messages are encrypted and has no character limits.
WhatsApp uses server pools to queue messages. When the client is ready, they request the messages from these pools. The server deletes these messages from its server pools and notifies the sender that the client has received the messages.


P3. Consider an HTTP client that wants to retrieve a Web document at a given URL. The IP address of the HTTP server is initially unknown. What transport and application-layer protocols besides HTTP are needed in this scenario?
A: The HTTP client would use the application-layer Transport Layer Security (TLS), which is an enhancement to TCP, to secure its messages over TCP. If the hostname is included in the URL, then the Domain Name System (DNS) is used to figure out the IP address of the host. Finally, the TCP protocol is used to establish a TCP connection over the transport-layer.

P4. Consider the following string of ASCII characters that were captured by Wireshark when the browser sent an HTTP GET message (i.e., this is the actual content of an HTTP GET message). The characters <cr><lf> are carriage return and line-feed characters (that is, the italized character string <cr> in the text below represents the single carriage-return character that was contained at that point in the HTTP header). Answer the following questions, indicating where in the HTTP GET message below you find the answer.
a. What is the URL of the document requested by the browser?
A: http://gaia.cs.umass.edu/cs453/index.html
The protocol and filename is found in the request line. The host is located in the header called Host.

b. What version of HTTP is the browser running?
A: HTTP/1.1
The version is found in the request line.

c. Does the browser request a non-persistent or a persistent connection?
A: Persistent, as evidenced by the header Connection:keep-alive.

d. What is the IP address of the host on which the browser is running?
A: This cannot be determined from an HTTP request message. We can, at least, tell what kind of browser the client is running with the User-Agent header. The IP address of the host can be determined by the Host header. Use the command 'nslookup gaia.cs.umass.edu'.

e. What type of browser initiates this message? Why is the browser type needed in an HTTP request message?
A: The Mozilla 5.0 browser initiates the request message. The User-Agent header is useful because the server can provide different versions of the same request object depending on the type and version of the requesting client.

P5. The text below shows the reply sent from the server in response to the HTTP GET message in the question above. Answer the following questions, indicating where in the message below you find the answer.

a. Was the server able to successfully find the document or not? What time was the document reply provided?
A: Server returned resposne 200 with response status message 'OK'. Therefore, it found the document. The time the response message was created and sent is indicated by the Date header.

b. When was the document last modified?
A: Indicated by the header Last-Modified: Sat, 10 Dec2005 18:27:46 GMT.

c. How many bytes are there in the document being returned?
A: Indicated by the header Content-Length: 3874.

d. What are the first 5 bytes of the document being returned? Did the server agree to a persistent connection?
A: The first 5 bytes are '<!doc'. The server agreed to a persistent connection because it returned the header Connection: Keep-Alive.

P6. Obtain the HTTP/1.1 specification (RFC 2616). Answer the following questions:
a. Explain the mechanism used for signaling between the client and server to indicate that a persistent connection is being closed. Can the client, the server, or both signal the close of a connection?
A: Clients and servers both use the Connection header with value 'close' should they wish to close the connection after sending the message.

b. What encryption services are provided by HTTP?
A: HTTP does not provide encryption services. There is merely a discussion of security risks in RFC 2616.

c. Can a client open three or more simultaneous connections with a given server?
A: Yes. These are called parallel connections.

d. Either a server or a client may close a transport connection between them if either one detects the connection has been idle for some time. Is it possible that one side starts closing a connection while the other side is transmitting data via this connection? Explain.
A: Yes, it is possible. If the server starts to close the connection, it thinks the connection is being closed. But if, at the same time, the client is sending bytes into the connection, it thinks the message is en route to the server. This is an asynchronous close event.

P7. Suppose within your Web browser you click on a link to obtain a Web page. The IP address for the associated URL is not cached in your local host, so a DNS lookup is necessary to obtain the IP address. Suppose that n DNS servers are visited before your host receives the IP address from DNS; the successive visits incur an RTT of RTT1, . . . , RTTn. Further suppose that the Web page associated with the link contains exactly one object, consisting of a small amount of HTML text. Let RTT0 denote the RTT between the local host and the server containing the object. Assuming zero transmission time of the object, how much time elapses from when the client clicks on the link until the client receives the object?
A: RTT_1 + RTT_2 + ... + RTT_n + RTT0_tcp + RTT0_request/response

P8. Referring to Problem P7, suppose the HTML file references eight very small objects on the same server. Neglecting transmission times, how much time elapses with
a. Non-persistent HTTP with no parallel TCP connections?
A: RTT_1 + RTT_2 + ... + RTT_n + 9*RTT0_tcp + RTT0_html + 8*RTT0_objects

b. Non-persistent HTTP with the browser configured for 6 parallel connections?
A: RTT_1 + RTT_2 + ... + RTT_n + 3*RTT0_tcp + RTT0_html + RTT0_6objects + RTT0_2objects. This is assuming the objects are received at the same time.

c. Persistent HTTP?
A: RTT_1 + RTT_2 + ... + RTT_n + RTT0_tcp + RTT0_html + RTT0_8objects

P9. Consider Figure 2.12, for which there is an institutional network connected to the Internet. Suppose that the average object size is 1,000,000 bits and that the average request rate from the institution’s browsers to the origin servers is 16 requests per second. Also suppose that the amount of time it takes from when the router on the Internet side of the access link forwards an HTTP request until it receives the response is three seconds on average (see Section 2.2.5). Model the total average response time as the sum of the average access delay (that is, the delay from Internet router to institution router) and the average Internet delay. For the average access delay, use ∆/(1 - ∆b), where ∆ is the average time required to send an object over the access link and b is the arrival rate of objects to the access link.
a. Find the total average response time.
A: Total Average Response Time = Average Access Delay + Average Internet Delay
Average Access Delay = ∆/(1 - ∆b) = (1/15) / (1 - 1/15 * 16) = -1.
∆ = 1,000,000 bits / 15,000,000 bits per second = 1/15 seconds
b = 16 objects / second
LAN Traffic Intensity = I_LAN = 16 requests per second * (1,000,000bits) / 100 Mbps = 0.16.
Access Traffic Intensity = I_Access = 16 requests per second * (1,000,000bits) / 15 Mbps = 1.067
Traffic Intensity is greater than 1. This network is in a state of congestion and an accurate average response time cannot be calculated using the formula above.

b. Now suppose a cache is installed in the institutional LAN. Suppose the miss rate is 0.4. Find the total response time.
A: b = 0.6 * 16 = 9.6 requests per second need the Internet.
Average Access Delay = (1/15) / (1 - 1/15 * 9.6) = 0.185 seconds
Total Response Time = 0.185 seconds + 3 seconds = 3.185 seconds.

P10. Consider a short, 10-meter link, over which a sender can transmit at a rate of 150 bits/sec in both directions. Suppose that packets containing data 
are 100,000 bits long, and packets containing only control (e.g., ACK or  handshaking) are 200 bits long. Assume that N parallel connections each get 1/N of the link bandwidth. Now consider the HTTP protocol, and suppose that each downloaded object is 100 Kbits long, and that the initial downloaded object contains 10 referenced objects from the same sender. Would parallel 
downloads via parallel instances of non-persistent HTTP make sense in this case? Now consider persistent HTTP. Do you expect significant gains over the non-persistent case? Justify and explain your answer.
A: Difference is less than 1%.

P15. What is the difference between MAIL FROM: in SMTP and From: in the mail message itself?
A: MAIL FROM: -> Identifies the sender's email address. Used in the SMTP protocol message to let the mail server know who the client is.
From: -> Used in the body of the SMTP message to let the end user know who sent the message.

P16. How does SMTP mark the end of a message body? How about HTTP? Can HTTP use the same method as SMTP to mark the end of a message body? Explain.
A: SMTP marks the end of a message body with "CRLF.CRLF". HTTP marks the end of a message with a "CRLF". HTTP can use the same method as SMTP to mark the end of a message body if some HTTP version redefines that particular portion of the protocol.

P17. Read RFC 5321 for SMTP. What does MTA stand for? Consider the following received spam e-mail (modified from a real spam e-mail). Assuming only the originator of this spam e-mail is malicious and all other hosts are honest, identify the malacious host that has generated this spam e-mail.
A: MTA stands for Mail Transfer Agent. Mail servers act as MTAs when they tranasport mail from one server to another. 


